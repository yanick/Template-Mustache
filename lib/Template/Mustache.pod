=head1 SYNOPSIS

    use Template::Mustache;

    # one-shot rendering

    print Template::Mustache->render(
        "Hello {{planet}}",
    );

    # compile and re-use template

    my $mustache = Template::Mustache->new(
        template => "Hello {{planet}}",
    );

    print $mustache->render( { planet => "World!" } );

=head1 DESCRIPTION

Template::Mustache is an implementation of the fabulous
L<Mustache|https://mustache.github.io/> templating
language for Perl.

This version of I<Template::Mustache> conforms to v1.1.3
of the L<Mustache specs|https://github.com/mustache/spec>.

Templates can be compiled and rendered on the spot via the
use of C<render> called as a class method.

    print Template::Mustache->render(
        "Hello {{planet}}",
    );

If you are considering re-using the same template many times, it's
recommended to create a C<Template::Mustache> object instead,
which will compile the template only once, and allow to render
it with different contexts.

    my $mustache = Template::Mustache->new(
        template => "Hello {{planet}}",
    );

    print $mustache->render( { planet => "World!" } );

=head1 CONSTANTS

=head2 $GRAMMAR

    print $Template::Mustache::GRAMMAR;

The L<Parse::RecDescent> grammar used to parse Mustache templates.


=method new( %arguments )

    my $mustache = Template::Mustache->new(
        template   => "Hello {{planet}}",
        delimiters => [ qw/ ! ! / ],
    );

Constructor.


=head3 arguments

=over

=item template => $string

A Mustache template.

=item template_path => $path

Instead of C<template>, a C<template_path> can be provided to read
the template and the partials from the fielsystem instead. See
the method C<template_path> to see how this works.

=item partials_path => $path

An optional filesystem path from which to gather partial
templates.

=item delimiters => [ $opening_tag, $closing_tag ]

An optional arrayref holding the pair of delimiters used by
the template. Defaults to C<{{ }}>.

=item context => $context

Context to use when rendering if not provided
as a parameter to C<render>. Defaults to the object
itself.

=item partials => $partials

An optional hashref of partials to assign to the object. See
the method C<partials> for more details on its format.

By default, if C<partials_path> (or C<template_path> is defined,
the template will try to resolve the partials as filenames with
the file extension C<.mustache>
relative to that path.


    my $mustache = Template::Mustache->new(
        partials => './root',
        template => '{{ > ./my/partial }}',  # => file ./root/my/partial.mustache
    );


=back


=method render( $context )

    print $mustache->render( $context );

Returns the rendered template, given the optionally provided context. Uses
the object's C<context attribute> if not provided.

=head3 Context

=head4 as a hashref

    Template::Mustache->render( 'Hello {{ thing }}', { thing => 'World!' } );

If the value is a coderef, it will be invoked to generate the value
to be inserted in the template.

    Template::Mustache->render(
        'it is {{ time }}',
        { time => sub { scalar localtime } }
    );

If you want the value returned by the coderef to be
interpolated as a Mustache template, a helper function is passed
as the last argument to the coderef.

    Template::Mustache->render(
        'hello {{ place }}',
        {
            place => sub { pop->('{{ planet }}') },
            planet => 'World',
        }
    );

The two previous interpolations work both for C<{{variable}}>
definitions, but also for C<{{#section}}>s.


    print Template::Mustache->render(
        'I am {{#obfuscated}}resu{{/obfuscated}}',
        {
            obfuscated   => sub { pop->('{{'.reverse(shift).'}}') },
            user         => '({{logged_in_as}})',
            logged_in_as => 'Sam',
        }
    );  # => 'I am (Sam)'


=head4 as an arrayref

    Template::Mustache->render( 'Hello {{ 1 }}', [ 'Earth', 'World!' ] );
    # => 'Hello World!

=head4 as an object

    my $object = Something->new( ... );

    Template::Mustache->render( 'Hello {{ thing }}', $object );  # thing resolves to $object->thing

=head4 as a scalar

    Template::Mustache->render( 'Hello {{ . }}', 'World!' );

=head4 no context

If no context is provided, it will default to the mustache object itself.
Which allows for definining templates as subclasses of I<Template::Mustache>.

    package My::Template;
    use Moo;
    extends 'Template::Mustache';

    sub template  { 'Hello {{ planet }}!' }

    sub planet { 'World' }


    # later on
    My::Template->new->render; # => Hello World!

=head4 multi-level variable

If the variable to be rendered is multi-level (e.g., C<foo.bar>), it is
resolved recursively on the context.

    # $foo->bar returns `{ baz => [ 'quux' ] }`

    Template::Mustache->render( '{{ bar.baz.0 }}', $foo );  # => 'quux'



=method render( $template, $context, $partials )

    print Template::Mustache->render( $template, $context, $partials );

    # equivalent to
    Template::Mustache->new->(
        template => $template, partials => $partials
    )->render( $context );

If invoked as a class method, C<render> takes in the mustache template, and
an optional context and set of partials.

To pass in partials without a
context, set the context to C<undef>.

    print Template::Mustache->render( $template, undef, $partials );




=method template( $template )

Accessor to the C<template> attribute.

=method template_path( $path )

Accessor to the C<template_path> attribute. If this attribute is
set, the template will be set to the content of the provided file
(if C<$path> is a directory, the file is assumed to be the
C<Mustache.mustache> file local to that directory).

=method partials_path( $path )

Accessor the C<partials_path> attribute. If partials were
not given as part of the object construction, when encountered
partials will be attempted to be read from that directory.
The filename for a partial is its name with C<.mustache> appended to it.

If C<template_path> is defined, C<partials_path> defaults to it.

=method context( $context )

Accessor to the C<context> attribute.

=method delimiters( [ $opening_tag, $closing_tag ] )

Accessor to the C<delimiters> attribute.

=method parsed

    my $tree = $mustache->parsed;

Returns the L<Template::Mustache::Token::Template> object representing
the parsed template.

=method parser

Returns the instance of L<Template::Mustache::Parser> used by the object.

=method partials( { partial_name => $partial, ... } )

    my $mustache = Template::Mustache->new(
        template => "{{> this }}",
        partials => { this => 'partials rock!' },
    );

    print $mustache->render; # => partials rock!

Add partial templates to the object.

Partial values can be
strings holding Mustache templates;

A coderef can also be set instead of a hashref. In that
case, partial templates will be generated by invoking that
sub with the name of the partial as its argument.

    my $mustache = Template::Mustache->new(
        template => "{{> this }} and {{> that }}",
        partials => sub { "a little bit of " . shift }
    );

=head1 Interpolation of numbers and HTML entities

By default and as ddictated by its specs, Mustache format numbers
into their canonical form.

    print Template::Mustache->render("{{.}}", "00.120" ); # prints '0.12'

If you rather want a value to be printed as-is, pass it as a reference.

    print Template::Mustache->render("{{.}}", \"00.120" ); # prints '00.120'

Ditto for HTML entities:

    my $value = "<stuff>";

    Template::Mustache->render("{{.}}", $value );  # "&lt;stuff&gt;"

    Template::Mustache->render("{{.}}", \$value ); # "<stuff>"


=head1 SEE ALSO

=over

=item L<https://mustache.github.io>

The main, pan-language site for I<Mustache>.

=item L<https://mustache.github.io/mustache.5.html>

Specs of the I<Mustache> DSL.

=item L<Text::Handlebars|https://metacpan.org/pod/Text::Handlebars>

I<Handlebars> is another templating language heavily inspired and very similar to I<Mustache>. L<Text::Handlebars>
is an implementation of it using L<Text::Xslate>.

=item L<Mustache::Simple>

Another module implementing Mustache templates.

=back

